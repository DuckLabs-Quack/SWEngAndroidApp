
    public static Presentation createFromXML(String xmlFile) {

        try {

            Presentation p = new Presentation();

            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(false);
            XmlPullParser xpp = factory.newPullParser();

            xpp.setInput(new StringReader(xmlFile));

            xpp.next();

            xpp.require(XmlPullParser.START_TAG, null, "Presentation");

            while (xpp.next() != XmlPullParser.END_DOCUMENT && xpp.getEventType() != XmlPullParser.END_TAG) {
                if (xpp.getEventType() == XmlPullParser.TEXT) {
                    continue;
                }

                String name = xpp.getName();
                Log.d("XMLParser ",name);

                switch (name) {
                    case "Meta":
                        parseMeta(xpp, p);
                        break;
                    case "Slide":
                        parseSlide(xpp, p);
                        break;
                    default:
                        consumeUnknownTag(xpp);
                        break;


                }
            }

            return p;
        }
        catch (Exception e) {
        }

        return null;
    }

    public static void parseMeta(XmlPullParser xpp, Presentation p) throws XmlPullParserException, IOException {
        xpp.require(XmlPullParser.START_TAG, null, "Meta");

        String k = xpp.getAttributeValue(null, "key");
        String v = xpp.getAttributeValue(null, "value");
        p.addMeta(k, v);

        xpp.next();

        xpp.require(XmlPullParser.END_TAG, null, "Meta");
        xpp.next();
    }

    public static void parseSlide(XmlPullParser xpp, Presentation p) throws XmlPullParserException, IOException {
        xpp.require(XmlPullParser.START_TAG, null, "Slide");
        Slide s = new Slide(p);

        while (xpp.next() != XmlPullParser.END_TAG) {
            if (xpp.getEventType() == XmlPullParser.TEXT) {
                continue;
            }
            String name = xpp.getName();
            Log.d("XMLParser: parseSlide ", name);

            switch (name) {
                case "Text":
                    parseText(xpp, s);
                    break;
                case "Shape":
                    parseShape(xpp,s);
                    break;
                default:
                    consumeUnknownTag(xpp);
                    break;
            }
        }

        p.addSlide(s);

//        xpp.next();
//
//        xpp.require(XmlPullParser.TEXT, null, null);
//        xpp.next();

        xpp.require(XmlPullParser.END_TAG, null, "Slide");
        xpp.next();
    }

    public static void parseText(XmlPullParser xpp, Slide s) throws XmlPullParserException, IOException  {
        xpp.require(XmlPullParser.START_TAG, null, "Text");
        TextAndroid t = new TextAndroid(s);
        t.setFont(xpp.getAttributeValue(null, "font"));

        String name = xpp.getName();
        int depth = xpp.getDepth();

        String str = "";

        while (!(xpp.next() == XmlPullParser.END_TAG && xpp.getName() == name && xpp.getDepth() == depth)) {
            // FIXME: Actually support Format tags
            if (xpp.getEventType() == XmlPullParser.TEXT) {
                // FIXME: Use a StringBuilder
                str += xpp.getText();
            }
        }

        t.setText(str);

        xpp.require(XmlPullParser.END_TAG, null, "Text");
        xpp.next();

        s.addChild(t);
    }

    public static void parseShape(XmlPullParser xpp, Slide s) throws XmlPullParserException, IOException {
        xpp.require(XmlPullParser.START_TAG, null, "Shape");


    }

    public static void consumeUnknownTag(XmlPullParser xpp) throws XmlPullParserException, IOException {
        xpp.require(XmlPullParser.START_TAG, null, null);
        String name = xpp.getName();
        int depth = xpp.getDepth();
        while (!(xpp.next() == XmlPullParser.END_TAG && xpp.getName() == name && xpp.getDepth() == depth));

        xpp.next();
    }
